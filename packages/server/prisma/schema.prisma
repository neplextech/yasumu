generator client {
    provider = "prisma-client-js"
    output   = "../node_modules/.prisma/client"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Configuration {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model User {
    id        String   @id @default(cuid())
    email     String   @unique
    password  String
    version   String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    team      Team?    @relation(fields: [teamId], references: [id], onDelete: SetNull)
    teamId    String?  @map("team_id")

    @@index([teamId])
}

model Team {
    id         String      @id @default(cuid())
    name       String
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    users      User[]
    workspaces Workspace[]
}

model Workspace {
    id           String        @id @default(cuid())
    name         String
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    environments Environment[]
    rest         Rest[]
    graphql      GraphQL[]
    webSocket    WebSocket[]
    socketIO     SocketIO[]
    smtp         Smtp[]
    team         Team?         @relation(fields: [teamId], references: [id], onDelete: SetNull)
    teamId       String?       @map("team_id")

    @@index([teamId])
}

model Environment {
    id          String    @id @default(cuid())
    name        String
    description String?
    variables   Json
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId String    @map("workspace_id")

    @@index([workspaceId])
}

model Rest {
    id          String    @id @default(cuid())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId String    @map("workspace_id")

    @@index([workspaceId])
}

model GraphQL {
    id          String    @id @default(cuid())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId String    @map("workspace_id")

    @@index([workspaceId])
}

model WebSocket {
    id          String    @id @default(cuid())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId String    @map("workspace_id")

    @@index([workspaceId])
}

model SocketIO {
    id          String    @id @default(cuid())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId String    @map("workspace_id")

    @@index([workspaceId])
}

model Smtp {
    id          String    @id @default(cuid())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId String    @map("workspace_id")

    @@index([workspaceId])
}
