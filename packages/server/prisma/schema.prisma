generator client {
    provider = "prisma-client-js"
    output   = "../node_modules/.prisma/client"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Configuration {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model User {
    id           String        @id @default(cuid())
    email        String        @unique
    version      String?
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    team         Team?         @relation(fields: [teamId], references: [id], onDelete: SetNull)
    teamId       String?       @map("team_id")
    authAccounts AuthAccount[]

    @@index([teamId])
}

model AuthAccount {
    id           String    @id @default(cuid())
    provider     String
    providerId   String
    accessToken  String?   @map("access_token")
    refreshToken String?   @map("refresh_token")
    tokenExpires DateTime? @map("token_expires")
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String    @map("user_id")

    @@unique([provider, providerId])
    @@index([userId])
}

model AuthProvider {
    id        String   @id @default(cuid())
    name      String   @unique
    enabled   Boolean  @default(true)
    config    Json
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Team {
    id         String      @id @default(cuid())
    name       String
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    users      User[]
    workspaces Workspace[]
}

model Workspace {
    id           String            @id @default(cuid())
    name         String
    createdAt    DateTime          @default(now())
    updatedAt    DateTime          @updatedAt
    environments Environment[]
    entities     WorkspaceEntity[]
    team         Team?             @relation(fields: [teamId], references: [id], onDelete: SetNull)
    teamId       String?           @map("team_id")

    @@index([teamId])
}

model Environment {
    id          String    @id @default(cuid())
    name        String
    description String?
    variables   Json
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId String    @map("workspace_id")

    @@index([workspaceId])
}

model WorkspaceEntity {
    id          String              @id @default(cuid())
    name        String
    type        WorkspaceEntityType
    createdAt   DateTime            @default(now())
    updatedAt   DateTime            @updatedAt
    workspace   Workspace           @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId String              @map("workspace_id")
    parent      WorkspaceEntity?    @relation("EntityHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
    parentId    String?             @map("parent_id")
    children    WorkspaceEntity[]   @relation("EntityHierarchy")
    contents    WorkspaceContent[]

    @@index([workspaceId])
    @@index([parentId])
}

model WorkspaceContent {
    id        String              @id @default(cuid())
    createdAt DateTime            @default(now())
    updatedAt DateTime            @updatedAt
    entity    WorkspaceEntity     @relation(fields: [entityId], references: [id], onDelete: Cascade)
    entityId  String              @map("entity_id")
    type      WorkspaceEntityType
    content   Json
    version   Int                 @default(1)

    @@index([entityId])
}

enum WorkspaceEntityType {
    REST
    GRAPHQL
    WEBSOCKET
    SOCKETIO
    SMTP
}
